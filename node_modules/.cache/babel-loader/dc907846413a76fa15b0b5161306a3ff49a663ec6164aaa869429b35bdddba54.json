{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: \"Login\",\n  data() {\n    const validateName = (rule, value, callback) => {\n      // 4-8位昵称\n      let reg = /^[a-zA-Z0-9]{4,8}$/;\n      if (value === \"\" || value === undefined || value === null) {\n        callback(new Error(\"请输入用户名\"));\n      } else if (!reg.test(value)) {\n        callback(new Error(\"请输入4-8位昵称\"));\n      } else {\n        callback();\n      }\n      const validatePwd = (rule, value, callback) => {\n        // 6-12位密码\n        let pwd = /^\\S*(?=\\S{6,12})(?=\\S*\\d)(?=\\S*[A-Z])(?=\\S*[a-z])(?=\\S*[!_.])\\S*$/;\n        if (value === \"\" || value === undefined || value === null) {\n          callback(new Error(\"请输入密码\"));\n        } else if (!pwd.test(value)) {\n          callback(new Error(\"请输入6-12位密码,需要包含大小写字母和数字及特殊符号\"));\n        }\n      };\n    };\n    return {\n      form: {\n        username: \"\",\n        password: \"\"\n      },\n      rules: {\n        username: [\n        //新方法 自定义校验规则\n        {\n          required: true,\n          validator: validateName,\n          trigger: \"blur\"\n        }\n        //旧方法\n        //   { required: true, message: \"请输入用户名\", trigger: \"blur\" },\n        //   { min: 6, max: 10, message: \"长度在6-10位字符之间\", trigger: \"blur\" },\n        ],\n\n        password: [\n        //新方法 自定义校验规则\n        {\n          required: true,\n          validator: validatePwd,\n          trigger: \"blur\"\n        }\n        //旧方法\n        //   { required: true, message: \"请输入密码\", trigger: \"blur\" },\n        //   { min: 6, max: 12, message: \"长度在6-10位字符之间\", trigger: \"blur\" },\n        ]\n      }\n    };\n  },\n\n  methods: {\n    login(form) {\n      this.$refs[form].validate(valid => {\n        if (valid) {\n          console.log(this.form);\n          this.axios.post(\"http://www.boredapi.com/api/activity/\", this.form).then(res => {\n            console.log(res);\n            //   console.log(\"@@@@@\", this);\n            if (res.status === 200) {\n              // console.log(\"%%%%%\", this);\n              localStorage.setItem(\"username\", res.data.username);\n              this.$message({\n                message: res.data.message,\n                type: \"success\"\n              });\n              this.$router.push(\"/home\");\n            }\n          }).catch(err => {\n            console.error(err);\n          });\n        } else {\n          console.error(this.form);\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["name","data","validateName","rule","value","callback","reg","undefined","Error","test","validatePwd","pwd","form","username","password","rules","required","validator","trigger","methods","login","$refs","validate","valid","console","log","axios","post","then","res","status","localStorage","setItem","$message","message","type","$router","push","catch","err","error"],"sources":["src/components/Login.vue"],"sourcesContent":["<!-- 登录页面注重的是表单的提交 -->\n<template>\n  <div class=\"login\">\n    <el-card class=\"box-card\">\n      <div slot=\"header\" class=\"clearfix\">\n        <span>后台管理系统</span>\n      </div>\n      <el-form label-width=\"80px\" :model=\"form\" ref=\"form\" :rules=\"rules\">\n        <!-- prop用来表单验证 -->\n        <el-form-item label=\"用户名\" prop=\"username\">\n          <el-input v-model=\"form.username\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"密码\" prop=\"password\">\n          <el-input type=\"password\" v-model=\"form.password\"></el-input>\n        </el-form-item>\n        <el-form-item>\n          <el-button type=\"primary\" @click=\"login('form')\">登录</el-button>\n        </el-form-item>\n      </el-form>\n    </el-card>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"Login\",\n  data() {\n    const validateName = (rule, value, callback) => {\n      // 4-8位昵称\n      let reg = /^[a-zA-Z0-9]{4,8}$/;\n      if (value === \"\" || value === undefined || value === null) {\n        callback(new Error(\"请输入用户名\"));\n      } else if (!reg.test(value)) {\n        callback(new Error(\"请输入4-8位昵称\"));\n      } else {\n        callback();\n      }\n      const validatePwd = (rule, value, callback) => {\n        // 6-12位密码\n        let pwd =\n          /^\\S*(?=\\S{6,12})(?=\\S*\\d)(?=\\S*[A-Z])(?=\\S*[a-z])(?=\\S*[!_.])\\S*$/;\n        if (value === \"\" || value === undefined || value === null) {\n          callback(new Error(\"请输入密码\"));\n        } else if (!pwd.test(value)) {\n          callback(\n            new Error(\"请输入6-12位密码,需要包含大小写字母和数字及特殊符号\")\n          );\n        }\n      };\n    };\n    return {\n      form: {\n        username: \"\",\n        password: \"\",\n      },\n      rules: {\n        username: [\n          //新方法 自定义校验规则\n          { required: true, validator: validateName, trigger: \"blur\" },\n          //旧方法\n          //   { required: true, message: \"请输入用户名\", trigger: \"blur\" },\n          //   { min: 6, max: 10, message: \"长度在6-10位字符之间\", trigger: \"blur\" },\n        ],\n        password: [\n          //新方法 自定义校验规则\n          { required: true, validator: validatePwd, trigger: \"blur\" },\n          //旧方法\n          //   { required: true, message: \"请输入密码\", trigger: \"blur\" },\n          //   { min: 6, max: 12, message: \"长度在6-10位字符之间\", trigger: \"blur\" },\n        ],\n      },\n    };\n  },\n  methods: {\n    login(form) {\n      this.$refs[form].validate((valid) => {\n        if (valid) {\n          console.log(this.form);\n          this.axios\n            .post(\"http://www.boredapi.com/api/activity/\", this.form)\n            .then((res) => {\n              console.log(res);\n              //   console.log(\"@@@@@\", this);\n              if (res.status === 200) {\n                // console.log(\"%%%%%\", this);\n                localStorage.setItem(\"username\", res.data.username);\n                this.$message({ message: res.data.message, type: \"success\" });\n                this.$router.push(\"/home\");\n              }\n            })\n            .catch((err) => {\n              console.error(err);\n            });\n        } else {\n          console.error(this.form);\n        }\n      });\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\">\n.login {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  background-color: #409eff;\n  .box-card {\n    width: 450px;\n    margin: 200px auto;\n    .clearfix {\n      font-size: 36px;\n      text-align: center;\n    }\n    .el-button {\n      width: 50%;\n      transform: translateX(50px);\n    }\n  }\n}\n</style>\n"],"mappings":";AAwBA;EACAA,IAAA;EACAC,KAAA;IACA,MAAAC,YAAA,GAAAA,CAAAC,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA;MACA,IAAAC,GAAA;MACA,IAAAF,KAAA,WAAAA,KAAA,KAAAG,SAAA,IAAAH,KAAA;QACAC,QAAA,KAAAG,KAAA;MACA,YAAAF,GAAA,CAAAG,IAAA,CAAAL,KAAA;QACAC,QAAA,KAAAG,KAAA;MACA;QACAH,QAAA;MACA;MACA,MAAAK,WAAA,GAAAA,CAAAP,IAAA,EAAAC,KAAA,EAAAC,QAAA;QACA;QACA,IAAAM,GAAA,GACA;QACA,IAAAP,KAAA,WAAAA,KAAA,KAAAG,SAAA,IAAAH,KAAA;UACAC,QAAA,KAAAG,KAAA;QACA,YAAAG,GAAA,CAAAF,IAAA,CAAAL,KAAA;UACAC,QAAA,CACA,IAAAG,KAAA,iCACA;QACA;MACA;IACA;IACA;MACAI,IAAA;QACAC,QAAA;QACAC,QAAA;MACA;MACAC,KAAA;QACAF,QAAA;QACA;QACA;UAAAG,QAAA;UAAAC,SAAA,EAAAf,YAAA;UAAAgB,OAAA;QAAA;QACA;QACA;QACA;QAAA,CACA;;QACAJ,QAAA;QACA;QACA;UAAAE,QAAA;UAAAC,SAAA,EAAAP,WAAA;UAAAQ,OAAA;QAAA;QACA;QACA;QACA;QAAA;MAEA;IACA;EACA;;EACAC,OAAA;IACAC,MAAAR,IAAA;MACA,KAAAS,KAAA,CAAAT,IAAA,EAAAU,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACAC,OAAA,CAAAC,GAAA,MAAAb,IAAA;UACA,KAAAc,KAAA,CACAC,IAAA,+CAAAf,IAAA,EACAgB,IAAA,CAAAC,GAAA;YACAL,OAAA,CAAAC,GAAA,CAAAI,GAAA;YACA;YACA,IAAAA,GAAA,CAAAC,MAAA;cACA;cACAC,YAAA,CAAAC,OAAA,aAAAH,GAAA,CAAA5B,IAAA,CAAAY,QAAA;cACA,KAAAoB,QAAA;gBAAAC,OAAA,EAAAL,GAAA,CAAA5B,IAAA,CAAAiC,OAAA;gBAAAC,IAAA;cAAA;cACA,KAAAC,OAAA,CAAAC,IAAA;YACA;UACA,GACAC,KAAA,CAAAC,GAAA;YACAf,OAAA,CAAAgB,KAAA,CAAAD,GAAA;UACA;QACA;UACAf,OAAA,CAAAgB,KAAA,MAAA5B,IAAA;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}